<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="EnvDTE" #>
<#@ assembly name="System.Core" #>
<# /* this includes a tool-generated file with a reference to a helper assembly */ #>
<#@ IncludeHelperAssembly Processor="HelperAssemblyIncluder" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="EnvDTE" #>
<#@ output extension=".cs" #>
<# 
try 
{
	// Instantiate all helper classes
	Helper _helper = new Helper ((DTE)((IServiceProvider)Host).GetService(typeof(DTE)), Host.TemplateFile);

	if (_helper.Config == null || _helper.Config.DesignerConnection == null)
	{
#>
	/* invalid or no configuration */
<#
	}
	else
	{
#>
<#= _helper.GetCode() #>




<#
		string _currentNamespace = "";
		bool _firstNamespace = true;

		foreach (Procedure _procedure in _helper.Config.Procedures)
		{
			var parameterCollection = _helper.GetProcedureParameterCollection(_procedure.Schema, _procedure.ProcedureName);
			List<List<ProcedureResultSetColumn>> columnsCollection = _helper.GetProcedureResultSetColumnCollection(_procedure.Schema, _procedure.ProcedureName);

			if (_currentNamespace != _procedure.Schema)
			{
				if (!_firstNamespace)
				{
					// Close the previous namespace
#>
}
<#
				}
				_firstNamespace = false;
				_currentNamespace = _procedure.Schema;
#>
namespace <#= _helper.Config.Namespace + ".Executables." + _currentNamespace #> 
{
<#
			}
#>
	public class <#= Tools.CleanName(_procedure.ProcedureName) #>
	{
		/* parameters */
		public class ParametersCollection 
		{
<#
			foreach (var _param in parameterCollection)
			{
#>
			// Parameter Name _<#= Tools.CleanName(_param.ParameterName) #> 
			private global::<#= _param.ClrTypeName #> _<#= Tools.CleanName(_param.ParameterName) #>;
			public global::<#= _param.ClrTypeName #> <#= Tools.CleanName(_param.ParameterName) #>
			{
				get 
				{
					return _<#= Tools.CleanName(_param.ParameterName) #>;
				}
				set 
				{
					_<#= Tools.CleanName(_param.ParameterName) #> = value;
				}
			}
<#
			}
#>
		}

		private ParametersCollection parametersCollection = new ParametersCollection();
		public ParametersCollection Parameters
		{
			get
			{
				return parametersCollection;
			}
		}

		// Return parameter
		private global::System.Int32 returnValue;
		public global::System.Int32 ReturnValue
		{
			get
			{
				return returnValue;
			}
		}
<#
				int _recordsetColumnsSetIndex = 0;
				foreach (List<ProcedureResultSetColumn> _recordsetColumnsSet in columnsCollection)
				{
#>
		// Definition of class for the first recordset
		public class Record<#= _recordsetColumnsSetIndex  #>
		{
<#
					foreach (var _column in _recordsetColumnsSet)
					{
	#>
			private global::<#= _column.ClrTypeName #> _<#= Tools.CleanName(_column.ColumnName) #>;
			public global::<#= _column.ClrTypeName #> <#= Tools.CleanName(_column.ColumnName) #>
			{
				get 
				{
					return _<#= Tools.CleanName(_column.ColumnName) #>;
				}
			}
<#
					}
#>
			public Record<#= _recordsetColumnsSetIndex  #> (<#
					bool _firstColumn = true;
					foreach (var _column in _recordsetColumnsSet)
					{
						if (_firstColumn)
						{
							_firstColumn = false;
						}
						else
						{
							#>, <#
						}
						#>global::<#= _column.ClrTypeName #> <#= Tools.CleanName(_column.ColumnName) #><#
					}#>)
			{
<#
					foreach (var _column in _recordsetColumnsSet)
					{
#>
				this._<#= Tools.CleanName(_column.ColumnName) #> = <#= Tools.CleanName(_column.ColumnName) #>; 
<#
					}
#>			}
		}

		private global::System.Collections.Generic.List<Record<#= _recordsetColumnsSetIndex  #>> recordset<#= _recordsetColumnsSetIndex  #> = new global::System.Collections.Generic.List<Record<#= _recordsetColumnsSetIndex  #>>();
		public global::System.Collections.Generic.List<Record<#= _recordsetColumnsSetIndex  #>> Recordset<#= _recordsetColumnsSetIndex  #>
		{
			get
			{
				return recordset<#= _recordsetColumnsSetIndex  #>;
			}
		}

<#					_recordsetColumnsSetIndex++;
				}
				// Now let's create both sync and async methods 0 - async, 1 - sync
				for (int _executeMethodId = 0; _executeMethodId < 2; _executeMethodId++)
				{
#>

		public static <#= _executeMethodId == 0 ? "async global::System.Threading.Tasks.Task<" : "" #><#= Tools.CleanName(_procedure.ProcedureName) #><#= _executeMethodId == 0 ? ">" : ""#> Execute<#= _executeMethodId == 0? "Async" : "" #> (<#
					foreach (var _param in parameterCollection)
					{
						#>global::<#= _param.ClrTypeName #> <#= _param.ParameterName #>, <#
					}
					#>global::<#= _helper.Config.Namespace #>.ExecutionScope executionScope) 
		{
			<#= Tools.CleanName(_procedure.ProcedureName) #> _retValue = new <#= Tools.CleanName(_procedure.ProcedureName) #>();

			// Instead of using a "using" statement I will need to do it differently because now the Connection object may be passed in
			{
				int _retryCycle = 0;
				
				// retry until exceed the max retries, or success or failure. 
				while (true)
				{
					global::System.Data.SqlClient.SqlConnection _conn = executionScope == null ? new global::System.Data.SqlClient.SqlConnection(global::<#= _helper.Config.Namespace #>.ExecutionScope.ConnectionString) : executionScope.Transaction.Connection;

					try
					{
						if (_conn.State != System.Data.ConnectionState.Open)
						{
							if (executionScope == null)
							{
								<#= _executeMethodId == 0 ? "await " : ""#>_conn.Open<#= _executeMethodId == 0 ? "Async" : ""#>();
							}
							else
							{
								// no need to cycle more - external transaction has been rolled back anyway
								_retryCycle = 1000;
								throw new global::System.Exception("Execution Scope must have an open connection.");
							}
						}
						using (global::System.Data.SqlClient.SqlCommand _cmd = _conn.CreateCommand())
						{
							_cmd.CommandType = global::System.Data.CommandType.StoredProcedure;
							if (executionScope != null && executionScope.Transaction != null)
								_cmd.Transaction = executionScope.Transaction;
							_cmd.CommandText = "<#= Tools.QuoteName(_procedure.Schema) + "." + Tools.QuoteName(_procedure.ProcedureName) #>";
<#
					foreach (var _param in parameterCollection)
					{
#>
							_cmd.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("<#= "@" + _param.ParameterName #>", global::System.Data.SqlDbType.<#= Tools.SqlDbTypeName(_param.SqlTypeName) #>, <#= ("nchar nvarchar".Split(new char[] {' '}).Contains(_param.SqlTypeName) && _param.MaxByteLength != -1) ? (_param.MaxByteLength / 2).ToString() : _param.MaxByteLength.ToString() #>, global::System.Data.ParameterDirection.<#= _param.IsOutputParameter ? "Output" : "Input" #>, true, <#= _param.Precision.ToString() #>, <#= _param.Scale.ToString() #>, null, global::System.Data.DataRowVersion.Default, <#= _param.ParameterName #>)<#
						if ("geography hierarchyid geometry".Split(new char[] {' '}).Contains(_param.SqlTypeName))
						{
#>{UdtTypeName = "<#= _param.SqlTypeName #>"}<#
						}#> );
	<#
					}
#>							_cmd.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ReturnValue", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, true, 0, 0, null, global::System.Data.DataRowVersion.Default, global::System.DBNull.Value));

<#
					if (columnsCollection.Count == 0)
					{
#>
							<#= _executeMethodId == 0 ? "await " : ""#>_cmd.ExecuteNonQuery<#= _executeMethodId == 0 ? "Async" : ""#>();
<#
					}
					else // fill the result set with data
					{
#>
							using (global::System.Data.SqlClient.SqlDataReader _reader = <#= _executeMethodId == 0 ? "await " : ""#>_cmd.ExecuteReader<#= _executeMethodId == 0 ? "Async" : ""#>())
							{
<#
						int _recordsetIndex = 0;
						foreach (List<ProcedureResultSetColumn> _recordset in columnsCollection)
						{
							if (_recordsetIndex > 0)
							{
#>
								if (<#= _executeMethodId == 0 ? "await " : ""#>_reader.NextResult<#= _executeMethodId == 0 ? "Async" : ""#>())
								{
<#							}
#>
									while (<#= _executeMethodId == 0 ? "await " : ""#>_reader.Read<#= _executeMethodId == 0 ? "Async" : ""#>())
									{
										_retValue.Recordset<#= _recordsetIndex #>.Add(new Record<#= _recordsetIndex #>(<#
							int _columnOrdinal = 0;
							foreach (var _column in _recordset)
							{
								if (_columnOrdinal != 0)
								{
									#>, <#
								}
								#>_reader.IsDBNull(<#= _columnOrdinal #>) ? null : <#= _executeMethodId == 0 ? "await " : ""#>_reader.GetFieldValue<#= _executeMethodId == 0 ? "Async" : ""#><global::<#= _column.ClrTypeName #>>(<#= _columnOrdinal #>)<#
						
								_columnOrdinal ++;
							}
#>));
									}
<#
							if (_recordsetIndex > 0)
							{
#>								}
<#							}
							_recordsetIndex ++;
						}
#>
							}
<#					}
					foreach (var _param in parameterCollection)
					{
#>
							_retValue.parametersCollection.<#= _param.ParameterName #> = _cmd.Parameters["<#= "@" + _param.ParameterName #>"].Value == global::System.DBNull.Value ? null : (global::<#= _param.ClrTypeName #>)_cmd.Parameters["<#= "@" + _param.ParameterName #>"].Value;
<#
					}
#>
							_retValue.returnValue = (global::System.Int32)_cmd.Parameters["@ReturnValue"].Value;
							return _retValue;
						}
					}
					catch (global::System.Data.SqlClient.SqlException e)
					{
						// Retry up to 10 times with 1 second delay - then only throw
						if (_retryCycle++ > 9 || !ExecutionScope.retryableErrors.Contains(e.Number))
							throw;
						global::System.Threading.Thread.Sleep(1000);
					}
					finally
					{
						if (executionScope == null && _conn != null)
						{
							((global::System.IDisposable)_conn).Dispose();
						}
					}
				}
			}
		}
<#			}
#>
	}
<#			
		}
        // Close the namespaces only if there is at least one enum
		if(!_firstNamespace)
        {
#>
} //
<#
        }
		/* Enums */
		_currentNamespace = "";
		_firstNamespace = true;

		foreach (var _enum in _helper.Config.Enums)
		{
			if (_currentNamespace != _enum.Schema)
			{
				if (!_firstNamespace)
				{
					// Close the previous namespace
#>
}
<#
				}
				_firstNamespace = false;
				_currentNamespace = _enum.Schema;
#>
namespace <#= _helper.Config.Namespace + ".Enums." + _currentNamespace #> 
{
<#

			}

			List<EnumData> enumDataCollection = _helper.GetEnumDataCollection(_enum.Schema, _enum.TableName, _enum.ValueColumn, _enum.KeyColumn);
#>
	public enum <#= Tools.CleanName(_enum.TableName) #>
	{
<#
			bool _isFirstDataItem = true;
			foreach (var _dataItem in enumDataCollection)
			{
				if (_isFirstDataItem)
				{
					_isFirstDataItem = false;
				}
				else
				{
					#>,
<#
				}
#>
		<#= String.Format("{0} = {1}", Tools.CleanName(_dataItem.Key), _dataItem.Value) #><#
			}
#>

	}
<#
		}
		// Close the namespaces only if there is at least one enum
		if(!_firstNamespace)
		{
#>
}
<#
		}
	}
}
catch (Exception e)
{
#>
/* An error occurred :<#= e.Message.Replace("*/", "").Replace("/*", "").Replace("//", "") #> */
<#
}
#>